package restmanager.view;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import restmanager.controller.RestManagerController;
import restmanager.model.Order;
import restmanager.model.OrderItem;

/**
 * Cadro de diálogo que mostra os elementos dun pedido
 *
 * @author Profe de programación
 */
public class OrderView extends javax.swing.JDialog {

    // Referenza á controladora da app
    private RestManagerController controller;
    // Pedido que se mostra
    private Order order;
    // Booleano para indicar se se cobrou o pedido
    private boolean orderPaid;

    /**
     * Obtén se o pedido foi cobrado ou non
     *
     * @return true se o pedido foi cobrado, senón false
     */
    public boolean isOrderPaid() {
        return orderPaid;
    }

    /**
     * Establece o pedido que se visualiza no diálogo
     *
     * @param order Pedido a visualizar
     */
    public void setOrder(Order order) {
        this.order = order;
        // Chamamos ao método que actualiza o cadro de diálogo cos datos do pedido
        updateOrderDetails();
    }

    /**
     * Acualiza os elementos do diálogo cos datos do pedido
     */
    private void updateOrderDetails() {
        // Mostramos na táboa os elementos do pedido
        DefaultTableModel model = (DefaultTableModel) jTblElements.getModel();
        model.setRowCount(0);

        for (OrderItem item : order.getItems()) {
            model.addRow(new Object[]{item.getItem().getDescription(),
                 item.getQuantity(), item.getPrice() + " €"});
        }
        // Mostramos na etiqueta o prezo total do pedido
        jLblTotalPrice.setText("Total do pedido: " + order.getPrice() + " €");
    }

    /**
     * Crea un novo formulario OrderView
     * 
     * @param parent Ventá nai
     * @param modal Indica se o cadro de diálogo é modal
     * @param controller Referenza á controladora da app
     */
    public OrderView(java.awt.Frame parent, boolean modal, RestManagerController controller) {
        super(parent, modal);
        initComponents();
        // Almacenamos a referenza á controladora e poñemos o pedido como non cobrado
        this.controller = controller;
        this.orderPaid = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLblOrderElements = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTblElements = new javax.swing.JTable();
        jLblTotalPrice = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jBtnRemoveElement = new javax.swing.JButton();
        jBtnRemoveOrder = new javax.swing.JButton();
        jBtnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Elementos do Pedido");

        jLblOrderElements.setText("Elementos do pedido:");
        getContentPane().add(jLblOrderElements, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jTblElements.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Elemento", "Cantidade", "Prezo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTblElements);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLblTotalPrice.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLblTotalPrice.setText("Total do pedido:");
        jPanel1.add(jLblTotalPrice, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jBtnRemoveElement.setText("Quitar elemento");
        jBtnRemoveElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRemoveElementActionPerformed(evt);
            }
        });
        jPanel2.add(jBtnRemoveElement);

        jBtnRemoveOrder.setText("Cobrar pedido");
        jBtnRemoveOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRemoveOrderActionPerformed(evt);
            }
        });
        jPanel2.add(jBtnRemoveOrder);

        jBtnClose.setText("Pechar");
        jBtnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCloseActionPerformed(evt);
            }
        });
        jPanel2.add(jBtnClose);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnRemoveElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRemoveElementActionPerformed
        // Comprobamos que haxa un elemento do pedido seleccionado
        if (jTblElements.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un elemento do pedido",
                    "Quitar elemento", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Quitamos unha unidade do elemento do pedido e actualizamos o diálogo
            controller.removeOrderItem(order, jTblElements.getSelectedRow());
            updateOrderDetails();
        }
    }//GEN-LAST:event_jBtnRemoveElementActionPerformed

    private void jBtnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCloseActionPerformed
        // Pechamos o cadro de diálogo
        this.setVisible(false);
    }//GEN-LAST:event_jBtnCloseActionPerformed

    private void jBtnRemoveOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRemoveOrderActionPerformed
        // Confirmamos se se quere cobrar o pedido
        if (JOptionPane.showConfirmDialog(this,
                "Está seguro de cobrar e eliminar o pedido seleccionado?",
                "Cobrar pedido", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            // Marcamos que o pedido está pagado e pechamos o diálogo
            orderPaid = true;
            this.setVisible(false);
        }
    }//GEN-LAST:event_jBtnRemoveOrderActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnClose;
    private javax.swing.JButton jBtnRemoveElement;
    private javax.swing.JButton jBtnRemoveOrder;
    private javax.swing.JLabel jLblOrderElements;
    private javax.swing.JLabel jLblTotalPrice;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTblElements;
    // End of variables declaration//GEN-END:variables
}
